{"version":3,"file":"static/css/main.711a52ed.css","mappings":"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","sources":["components/home/home.scss","components/home/_breakpoints.scss","components/destination/destination.scss","components/destination/_breakpoints.scss","components/crew/crew.scss","components/crew/_breakpoints.scss","components/technology/technology.scss","components/technology/_breakpoints.scss","components/navar/navar.scss","components/navar/_breakpoints.scss"],"sourcesContent":["* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@400;700&family=Barlow:wght@400;700&family=Bellefair&display=swap');\r\n@import 'breakpoints';\r\n$font-base-family-1: 'Barlow';\r\n$font-base-family-2: 'Barlow Condensed';\r\n$font-base-family-3: 'Bellefair';\r\n\r\n\r\n$font-size-v1: 9.375rem; //150px\r\n$font-size-v2: 6.25rem; //100px\r\n$font-size-v3: 5rem; //80px\r\n$font-size-v4: 3.5rem; //56px\r\n$font-size-v5: 2.5rem; //40px\r\n$font-size-v6: 2rem; //32px\r\n$font-size-v7: 1.75rem; //28px\r\n$font-size-v8: 1.5rem; //24px\r\n$font-size-v9: 1.25rem; //20px\r\n$font-size-v10: 1.125rem; //18px\r\n$font-size-v11: 1rem; //16px\r\n$font-size-v12: .938rem; //15px\r\n$font-size-v13: .875rem; //14px\r\n\r\n$font-weight-400: 400;\r\n$font-weight-700: 700;\r\n\r\n\r\n$text-transfrom-upper: uppercase;\r\n$text-transfrom-capitalize: capitalize;\r\n\r\n$letter-spacing-1: 2.7px;\r\n\r\n$color-very-dark: hsl(230, 33%, 7%);\r\n$color-light-grayish-blue: hsl(231, 77%, 90%);\r\n$color-white: hsl(0, 0%, 100%);\r\n$color-opacity: .25;\r\n\r\n@mixin heroStyle {\r\n    position: absolute;\r\n    color: $color-white;\r\n    text-align: center;\r\n    top: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin heroImage {\r\n    position: relative;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n@mixin navbarHover {\r\n\r\n    &::after {\r\n        content: '';\r\n        position: absolute;\r\n        bottom: -100%;\r\n        width: 0%;\r\n        left: 0%;\r\n        border-bottom: 3px solid $color-white;\r\n        background: none;\r\n        transition: .8s cubic-bezier(0.5, 1, 0.89, 1);\r\n        display: block;\r\n    }\r\n\r\n    &:hover::after,\r\n    &:focus::after {\r\n        opacity: .5;\r\n        width: 100%;\r\n        border-bottom: 3px solid $color-white\r\n    }\r\n\r\n    &.active__link::after {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n\r\n@mixin heroImgPostion {\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0 1.6rem;\r\n    color: $color-white;\r\n    margin-top: 1rem;\r\n    width: 100vw;\r\n}\r\n\r\n.hero-img {\r\n\r\n    height: 100vh;\r\n    width: 100vw;\r\n    background-image: url('../../asset/background-home-desktop.jpg');\r\n    position: relative;\r\n    z-index: -1;\r\n    background-repeat: no-repeat\r\n\r\n}\r\n\r\n.hero-container {\r\n    @include heroStyle;\r\n\r\n\r\n\r\n    .space {\r\n        position: absolute;\r\n        margin-top: 2.5rem;\r\n        width: 100vw;\r\n\r\n        @include media('>=tablet') {\r\n            margin: 0 auto;\r\n            margin-top: 2rem;\r\n        }\r\n\r\n        @include media('>=smallDesktop') {\r\n            padding: 0 2rem;\r\n            margin-top: 2rem;\r\n            display: flex;\r\n            justify-content: space-around;\r\n            align-items: center;\r\n            flex-direction: row;\r\n            text-align: left\r\n        }\r\n\r\n        .space-desc {\r\n\r\n            span {\r\n                font-family: $font-base-family-2;\r\n                font-size: $font-size-v11;\r\n                letter-spacing: $letter-spacing-1;\r\n                text-transform: $text-transfrom-upper;\r\n\r\n                @include media('>largePhone') {\r\n                    font-size: $font-size-v9;\r\n                }\r\n            }\r\n\r\n            h1 {\r\n                font-family: $font-base-family-3;\r\n                text-transform: $text-transfrom-upper;\r\n                font-size: $font-size-v3;\r\n                line-height: 90px;\r\n                padding: 0;\r\n                font-weight: $font-weight-400;\r\n\r\n                @include media('>=tablet') {\r\n                    font-size: $font-size-v1;\r\n                    line-height: 180px;\r\n                    margin-top: 2rem;\r\n                }\r\n            }\r\n\r\n            p {\r\n                \r\n                font-family: 'Barlow Condensed';\r\n                font-size: $font-size-v12;\r\n                line-height: 25px;\r\n                padding: 0 1.3rem;\r\n\r\n                @include media('>=tablet') {\r\n                    font-size: $font-size-v10;\r\n                    margin: 0 auto;\r\n                    width: 445px;\r\n                    padding: 2rem 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        .large-btn {\r\n            font-family: $font-base-family-3;\r\n            text-transform: $text-transfrom-upper;\r\n            font-size: $font-size-v9;\r\n            color: $color-very-dark;\r\n            font-weight: $font-weight-400;\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            margin: 0 auto;\r\n            z-index: 1;\r\n            background-color: $color-white;\r\n            height: 150px;\r\n            width: 150px;\r\n            border-radius: 50%;\r\n            margin-top: 4rem;\r\n\r\n\r\n            &:hover::after,\r\n            &:focus::after {\r\n                opacity: 1;\r\n                transform: scale(1.4);\r\n            }\r\n\r\n            @include media('>=tablet') {\r\n                margin: 0;\r\n                height: 250px;\r\n                width: 250px;\r\n                margin: 0 auto;\r\n                font-size: $font-size-v6;\r\n            }\r\n\r\n            @include media('>smallDesktop') {\r\n                margin: 0;\r\n                height: 275px;\r\n                width: 275px;\r\n            }\r\n        }\r\n    }\r\n}","@charset \"UTF-8\";\r\n\r\n$breakpoints: ('phone': 375px,\r\n    'largePhone': 575px,\r\n    'tablet': 768px,\r\n    'tabletBig': 920px,\r\n    'smallDesktop': 1150px,\r\n    'midDesktop': 1440px,\r\n    'largeDesktop': 1920px,\r\n\r\n) !default;\r\n\r\n\r\n\r\n$media-expressions: ('screen': 'screen',\r\n    'print': 'print',\r\n    'handheld': 'handheld',\r\n    'landscape': '(orientation: landscape)',\r\n    'portrait': '(orientation: portrait)',\r\n    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n    'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n\r\n$unit-intervals: ('px': 1,\r\n    'em': 0.01,\r\n    'rem': 0.1,\r\n    '': 0) !default;\r\n\r\n\r\n$im-media-support: true !default;\r\n\r\n\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n\r\n@function im-log($message) {\r\n    @if feature-exists('at-error') {\r\n        @error $message;\r\n    }\r\n\r\n    @else {\r\n        @warn $message;\r\n        $_: noop();\r\n    }\r\n\r\n    @return $message;\r\n}\r\n\r\n\r\n\r\n@mixin log($message) {\r\n    @if im-log($message) {}\r\n}\r\n\r\n\r\n\r\n@function noop() {}\r\n\r\n\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n    $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n    @if not $no-media-breakpoint-value {\r\n        @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n    }\r\n\r\n    @each $condition in $conditions {\r\n        @if not map-has-key($media-expressions, $condition) {\r\n            $operator: get-expression-operator($condition);\r\n            $prefix: get-expression-prefix($operator);\r\n            $value: get-expression-value($condition, $operator);\r\n\r\n            @if ($prefix=='max'and $value <=$no-media-breakpoint-value) or ($prefix=='min'and $value > $no-media-breakpoint-value) {\r\n                @return false;\r\n            }\r\n        }\r\n\r\n        @else if not index($im-no-media-expressions, $condition) {\r\n            @return false;\r\n        }\r\n    }\r\n\r\n    @return true;\r\n}\r\n\r\n\r\n@function get-expression-operator($expression) {\r\n    @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n        @if str-index($expression, $operator) {\r\n            @return $operator;\r\n        }\r\n    }\r\n\r\n\r\n    $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n\r\n@function get-expression-dimension($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n    $dimension: 'width';\r\n\r\n    @if str-length($parsed-dimension)>0 {\r\n        $dimension: $parsed-dimension;\r\n    }\r\n\r\n    @return $dimension;\r\n}\r\n\r\n@function get-expression-prefix($operator) {\r\n    @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n\r\n@function get-expression-value($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n    @if map-has-key($breakpoints, $value) {\r\n        $value: map-get($breakpoints, $value);\r\n    }\r\n\r\n    @else {\r\n        $value: to-number($value);\r\n    }\r\n\r\n    $interval: map-get($unit-intervals, unit($value));\r\n\r\n    @if not $interval {\r\n        $_: im-log('Unknown unit `#{unit($value)}`.');\r\n    }\r\n\r\n    @if $operator=='>' {\r\n        $value: $value + $interval;\r\n    }\r\n\r\n    @else if $operator=='<' {\r\n        $value: $value - $interval;\r\n    }\r\n\r\n    @return $value;\r\n}\r\n\r\n\r\n\r\n@function parse-expression($expression) {\r\n\r\n    @if map-has-key($media-expressions, $expression) {\r\n        @return map-get($media-expressions, $expression);\r\n    }\r\n\r\n    $operator: get-expression-operator($expression);\r\n    $dimension: get-expression-dimension($expression, $operator);\r\n    $prefix: get-expression-prefix($operator);\r\n    $value: get-expression-value($expression, $operator);\r\n\r\n    @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n    @if length($list) < 1 or $start>$end {\r\n        @return ();\r\n    }\r\n\r\n    $result: ();\r\n\r\n    @for $i from $start through $end {\r\n        $result: append($result, nth($list, $i));\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n\r\n@function to-number($value) {\r\n    @if type-of($value)=='number' {\r\n        @return $value;\r\n    }\r\n\r\n    @else if type-of($value) !='string' {\r\n        $_: im-log('Value for `to-number` should be a number or a string.');\r\n    }\r\n\r\n    $first-character: str-slice($value, 1, 1);\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: ($first-character=='-');\r\n    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n\r\n    @if ($first-character=='+'or $first-character=='-') {\r\n        $value: str-slice($value, 2);\r\n    }\r\n\r\n    @for $i from 1 through str-length($value) {\r\n        $character: str-slice($value, $i, $i);\r\n\r\n        @if not (index(map-keys($numbers), $character) or $character=='.') {\r\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n        }\r\n\r\n        @if $character=='.' {\r\n            $digits: 1;\r\n        }\r\n\r\n        @else if $digits==0 {\r\n            $result: $result * 10 + map-get($numbers, $character);\r\n        }\r\n\r\n        @else {\r\n            $digits: $digits * 10;\r\n            $result: $result + map-get($numbers, $character) / $digits;\r\n        }\r\n    }\r\n\r\n    @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n\r\n@function to-length($value, $unit) {\r\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: im-log('Invalid unit `#{$unit}`.');\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n\r\n\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n    // Save global configuration\r\n    $global-breakpoints: $breakpoints;\r\n    $global-media-expressions: $media-expressions;\r\n\r\n    // Update global configuration\r\n    $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n    $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n    @content;\r\n\r\n    // Restore global configuration\r\n    $breakpoints: $global-breakpoints !global;\r\n    $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n\r\n@mixin media($conditions...) {\r\n    @if ($im-media-support and length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n        @content;\r\n    }\r\n\r\n    @else if ($im-media-support and length($conditions) > 0) {\r\n        @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\r\n            // Recursive call\r\n            @include media(slice($conditions, 2)...) {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}","* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@400;700&family=Barlow:wght@400;700&family=Bellefair&display=swap');\r\n@import 'breakpoints';\r\n$font-base-family-1: 'Barlow';\r\n$font-base-family-2: 'Barlow Condensed';\r\n$font-base-family-3: 'Bellefair';\r\n\r\n\r\n$font-size-v1: 9.375rem; //150px\r\n$font-size-v2: 6.25rem; //100px\r\n$font-size-v3: 5rem; //80px\r\n$font-size-v4: 3.5rem; //56px\r\n$font-size-v5: 2.5rem; //40px\r\n$font-size-v6: 2rem; //32px\r\n$font-size-v7: 1.75rem; //28px\r\n$font-size-v8: 1.5rem; //24px\r\n$font-size-v9: 1.25rem; //20px\r\n$font-size-v10: 1.125rem; //18px\r\n$font-size-v11: 1rem; //16px\r\n$font-size-v12: .938rem; //15px\r\n$font-size-v13: .875rem; //14px\r\n\r\n$font-weight-400: 400;\r\n$font-weight-700: 700;\r\n\r\n\r\n$text-transfrom-upper: uppercase;\r\n$text-transfrom-capitalize: capitalize;\r\n\r\n$letter-spacing-1: 2.7px;\r\n\r\n$color-very-dark: hsl(230, 33%, 7%);\r\n$color-light-grayish-blue: hsl(231, 77%, 90%);\r\n$color-white: hsl(0, 0%, 100%);\r\n$color-opacity: .25;\r\n\r\n@mixin heroStyle {\r\n    position: absolute;\r\n    color: $color-white;\r\n    text-align: center;\r\n    top: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin heroImage {\r\n    position: relative;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n@mixin navbarHover {\r\n\r\n    &::after {\r\n        content: '';\r\n        position: absolute;\r\n        bottom: -100%;\r\n        width: 0%;\r\n        left: 0%;\r\n        border-bottom: 3px solid $color-white;\r\n        background: none;\r\n        transition: .8s cubic-bezier(0.5, 1, 0.89, 1);\r\n        display: block;\r\n    }\r\n\r\n    &:hover::after,\r\n    &:focus::after {\r\n        opacity: .5;\r\n        width: 100%;\r\n        border-bottom: 3px solid $color-white\r\n    }\r\n\r\n    &.active__link::after {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n\r\n@mixin heroImgPostion {\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0 1.6rem;\r\n    color: $color-white;\r\n    margin-top: 1rem;\r\n    width: 100vw;\r\n    height: 100vh;\r\n}\r\n\r\n\r\n.destination__bg {\r\n    @include heroStyle;\r\n\r\n    .container__img {\r\n        @include heroImage;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        margin-bottom: -70px;\r\n\r\n\r\n        background-image: url('../../asset/background-destination-desktop.jpg');\r\n        \r\n\r\n\r\n    }\r\n}\r\n\r\n.destination {\r\n    @include heroImgPostion;\r\n\r\n    @include media('>smallDesktop') {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        justify-content: space-evenly;\r\n        text-align: left;\r\n        margin-top: 4rem;\r\n        padding: 4rem;\r\n    }\r\n\r\n    .destination__top {\r\n\r\n        @include media('>smallDesktop') {\r\n            margin-right: 8rem;\r\n        }\r\n\r\n        @include media('>largePhone') {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        h4 {\r\n            font-size: $font-size-v10;\r\n            text-transform: $text-transfrom-upper;\r\n            font-family: $font-base-family-2;\r\n            letter-spacing: 2.4;\r\n            font-weight: $font-weight-400;\r\n            line-height: 20px;\r\n            margin-top: 2rem;\r\n\r\n            @include media('>largePhone') {\r\n                font-size: $font-size-v9;\r\n                margin-bottom: 1rem;\r\n            }\r\n\r\n            @include media('>smallDesktop') {\r\n                font-size: $font-size-v7;\r\n                letter-spacing: 4.7px;\r\n            }\r\n\r\n            span {\r\n                font-weight: $font-weight-700;\r\n                opacity: $color-opacity;\r\n            }\r\n        }\r\n\r\n        .destination__place {\r\n            background-position: center;\r\n            background-repeat: no-repeat;\r\n            background-size: cover;\r\n            width: 170px;\r\n            height: 170px;\r\n            margin: 0 auto;\r\n            margin-top: 2.5rem;\r\n\r\n            @include media('>=tablet') {\r\n                width: 300px;\r\n                height: 300px;\r\n            }\r\n\r\n            @include media('>smallDesktop') {\r\n                width: 445px;\r\n                height: 445px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .destination__bottom {\r\n        .page__links {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            flex-direction: row;\r\n            list-style: none;\r\n            margin: 1.2rem 0;\r\n\r\n            @include media('>smallDesktop') {\r\n                margin-right: 1.8rem;\r\n            }\r\n\r\n            li {\r\n                a {\r\n                    font-family: $font-base-family-2;\r\n                    font-size: $font-size-v13;\r\n                    text-transform: $text-transfrom-upper;\r\n                    color: $color-white;\r\n                    margin: 0 1rem;\r\n                    letter-spacing: $letter-spacing-1;\r\n                    position: relative;\r\n                    display: block;\r\n\r\n                    @include navbarHover;\r\n\r\n                    @include media('>largePhone') {\r\n                        font-size: $font-size-v11;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .text__info {\r\n            h1 {\r\n                font-family: $font-base-family-3;\r\n                font-size: $font-size-v4;\r\n                text-transform: $text-transfrom-upper;\r\n                text-align: center;\r\n                font-weight: $font-weight-400;\r\n\r\n                @include media('>largePhone') {\r\n                    font-size: $font-size-v3;\r\n                }\r\n\r\n                @include media('>=tablet') {\r\n                    font-size: $font-size-v2;\r\n                    margin-top: 2rem;\r\n                }\r\n\r\n                @include media('>=smallDesktop') {\r\n                    text-align: left;\r\n                }\r\n            }\r\n\r\n            p {\r\n                font-family: $font-base-family-1;\r\n                line-height: 25px;\r\n                font-size: $font-size-v12;\r\n                text-align: center;\r\n                margin-bottom: 2rem;\r\n\r\n                @include media('>largePhone') {\r\n                    font-size: $font-size-v11;\r\n                    line-height: 28px;\r\n                    width: 570px;\r\n                }\r\n\r\n                @include media('>smallDesktop') {\r\n                    text-align: left;\r\n                    width: 444px;\r\n                }\r\n\r\n                @include media('>largePhone') {\r\n                    font-size: $font-size-v10;\r\n                }\r\n            }\r\n\r\n            .line {\r\n                border: 1px solid $color-white;\r\n                opacity: $color-opacity;\r\n            }\r\n\r\n            .travel-info {\r\n\r\n                h2,\r\n                h3 {\r\n                    font-family: $font-base-family-3;\r\n                    font-size: $font-size-v7;\r\n                    text-transform: $text-transfrom-upper;\r\n                    display: flex;\r\n                    text-align: center;\r\n                    flex-direction: column;\r\n                    margin-top: 1rem;\r\n                    font-weight: $font-weight-400;\r\n\r\n                    span {\r\n                        font-family: $font-base-family-2;\r\n                        font-size: $font-size-v13;\r\n                        font-weight: $font-weight-400;\r\n                        line-height: 2rem;\r\n                        letter-spacing: $letter-spacing-1;\r\n                    }\r\n\r\n                    @include media('>smallDesktop') {\r\n                        font-size: $font-size-v7;\r\n                    }\r\n                }\r\n\r\n                @include media('>largePhone') {\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    justify-content: space-around;\r\n                    margin-top: 1.5rem;\r\n                }\r\n\r\n                @include media('>smallDesktop') {\r\n                    justify-content: space-between;\r\n                }\r\n            }\r\n\r\n            @include media('>smallDesktop') {\r\n                margin-left: 7rem;\r\n            }\r\n        }\r\n    }\r\n}","@charset \"UTF-8\";\r\n\r\n$breakpoints: ('phone': 375px,\r\n    'largePhone': 575px,\r\n    'tablet': 768px,\r\n    'tabletBig': 920px,\r\n    'smallDesktop': 1150px,\r\n    'midDesktop': 1440px,\r\n    'largeDesktop': 1920px,\r\n\r\n) !default;\r\n\r\n\r\n\r\n$media-expressions: ('screen': 'screen',\r\n    'print': 'print',\r\n    'handheld': 'handheld',\r\n    'landscape': '(orientation: landscape)',\r\n    'portrait': '(orientation: portrait)',\r\n    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n    'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n\r\n$unit-intervals: ('px': 1,\r\n    'em': 0.01,\r\n    'rem': 0.1,\r\n    '': 0) !default;\r\n\r\n\r\n$im-media-support: true !default;\r\n\r\n\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n\r\n@function im-log($message) {\r\n    @if feature-exists('at-error') {\r\n        @error $message;\r\n    }\r\n\r\n    @else {\r\n        @warn $message;\r\n        $_: noop();\r\n    }\r\n\r\n    @return $message;\r\n}\r\n\r\n\r\n\r\n@mixin log($message) {\r\n    @if im-log($message) {}\r\n}\r\n\r\n\r\n\r\n@function noop() {}\r\n\r\n\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n    $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n    @if not $no-media-breakpoint-value {\r\n        @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n    }\r\n\r\n    @each $condition in $conditions {\r\n        @if not map-has-key($media-expressions, $condition) {\r\n            $operator: get-expression-operator($condition);\r\n            $prefix: get-expression-prefix($operator);\r\n            $value: get-expression-value($condition, $operator);\r\n\r\n            @if ($prefix=='max'and $value <=$no-media-breakpoint-value) or ($prefix=='min'and $value > $no-media-breakpoint-value) {\r\n                @return false;\r\n            }\r\n        }\r\n\r\n        @else if not index($im-no-media-expressions, $condition) {\r\n            @return false;\r\n        }\r\n    }\r\n\r\n    @return true;\r\n}\r\n\r\n\r\n@function get-expression-operator($expression) {\r\n    @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n        @if str-index($expression, $operator) {\r\n            @return $operator;\r\n        }\r\n    }\r\n\r\n\r\n    $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n\r\n@function get-expression-dimension($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n    $dimension: 'width';\r\n\r\n    @if str-length($parsed-dimension)>0 {\r\n        $dimension: $parsed-dimension;\r\n    }\r\n\r\n    @return $dimension;\r\n}\r\n\r\n@function get-expression-prefix($operator) {\r\n    @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n\r\n@function get-expression-value($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n    @if map-has-key($breakpoints, $value) {\r\n        $value: map-get($breakpoints, $value);\r\n    }\r\n\r\n    @else {\r\n        $value: to-number($value);\r\n    }\r\n\r\n    $interval: map-get($unit-intervals, unit($value));\r\n\r\n    @if not $interval {\r\n        $_: im-log('Unknown unit `#{unit($value)}`.');\r\n    }\r\n\r\n    @if $operator=='>' {\r\n        $value: $value + $interval;\r\n    }\r\n\r\n    @else if $operator=='<' {\r\n        $value: $value - $interval;\r\n    }\r\n\r\n    @return $value;\r\n}\r\n\r\n\r\n\r\n@function parse-expression($expression) {\r\n\r\n    @if map-has-key($media-expressions, $expression) {\r\n        @return map-get($media-expressions, $expression);\r\n    }\r\n\r\n    $operator: get-expression-operator($expression);\r\n    $dimension: get-expression-dimension($expression, $operator);\r\n    $prefix: get-expression-prefix($operator);\r\n    $value: get-expression-value($expression, $operator);\r\n\r\n    @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n    @if length($list) < 1 or $start>$end {\r\n        @return ();\r\n    }\r\n\r\n    $result: ();\r\n\r\n    @for $i from $start through $end {\r\n        $result: append($result, nth($list, $i));\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n\r\n@function to-number($value) {\r\n    @if type-of($value)=='number' {\r\n        @return $value;\r\n    }\r\n\r\n    @else if type-of($value) !='string' {\r\n        $_: im-log('Value for `to-number` should be a number or a string.');\r\n    }\r\n\r\n    $first-character: str-slice($value, 1, 1);\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: ($first-character=='-');\r\n    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n\r\n    @if ($first-character=='+'or $first-character=='-') {\r\n        $value: str-slice($value, 2);\r\n    }\r\n\r\n    @for $i from 1 through str-length($value) {\r\n        $character: str-slice($value, $i, $i);\r\n\r\n        @if not (index(map-keys($numbers), $character) or $character=='.') {\r\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n        }\r\n\r\n        @if $character=='.' {\r\n            $digits: 1;\r\n        }\r\n\r\n        @else if $digits==0 {\r\n            $result: $result * 10 + map-get($numbers, $character);\r\n        }\r\n\r\n        @else {\r\n            $digits: $digits * 10;\r\n            $result: $result + map-get($numbers, $character) / $digits;\r\n        }\r\n    }\r\n\r\n    @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n\r\n@function to-length($value, $unit) {\r\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: im-log('Invalid unit `#{$unit}`.');\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n\r\n\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n    // Save global configuration\r\n    $global-breakpoints: $breakpoints;\r\n    $global-media-expressions: $media-expressions;\r\n\r\n    // Update global configuration\r\n    $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n    $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n    @content;\r\n\r\n    // Restore global configuration\r\n    $breakpoints: $global-breakpoints !global;\r\n    $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n\r\n@mixin media($conditions...) {\r\n    @if ($im-media-support and length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n        @content;\r\n    }\r\n\r\n    @else if ($im-media-support and length($conditions) > 0) {\r\n        @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\r\n            // Recursive call\r\n            @include media(slice($conditions, 2)...) {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}","* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@400;700&family=Barlow:wght@400;700&family=Bellefair&display=swap');\r\n@import 'breakpoints';\r\n$font-base-family-1: 'Barlow';\r\n$font-base-family-2: 'Barlow Condensed';\r\n$font-base-family-3: 'Bellefair';\r\n\r\n\r\n$font-size-v1: 9.375rem; //150px\r\n$font-size-v2: 6.25rem; //100px\r\n$font-size-v3: 5rem; //80px\r\n$font-size-v4: 3.5rem; //56px\r\n$font-size-v5: 2.5rem; //40px\r\n$font-size-v6: 2rem; //32px\r\n$font-size-v7: 1.75rem; //28px\r\n$font-size-v8: 1.5rem; //24px\r\n$font-size-v9: 1.25rem; //20px\r\n$font-size-v10: 1.125rem; //18px\r\n$font-size-v11: 1rem; //16px\r\n$font-size-v12: .938rem; //15px\r\n$font-size-v13: .875rem; //14px\r\n\r\n$font-weight-400: 400;\r\n$font-weight-700: 700;\r\n\r\n\r\n$text-transfrom-upper: uppercase;\r\n$text-transfrom-capitalize: capitalize;\r\n\r\n$letter-spacing-1: 2.7px;\r\n\r\n$color-very-dark: hsl(230, 33%, 7%);\r\n$color-light-grayish-blue: hsl(231, 77%, 90%);\r\n$color-white: hsl(0, 0%, 100%);\r\n$color-opacity: .25;\r\n\r\n@mixin heroStyle {\r\n    position: absolute;\r\n    color: $color-white;\r\n    text-align: center;\r\n    top: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin heroImage {\r\n    position: relative;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n@mixin navbarHover {\r\n\r\n    &::after {\r\n        content: '';\r\n        position: absolute;\r\n        bottom: -100%;\r\n        width: 0%;\r\n        left: 0%;\r\n        border-bottom: 3px solid $color-white;\r\n        background: none;\r\n        transition: .8s cubic-bezier(0.5, 1, 0.89, 1);\r\n        display: block;\r\n    }\r\n\r\n    &:hover::after,\r\n    &:focus::after {\r\n        opacity: .5;\r\n        width: 100%;\r\n        border-bottom: 3px solid $color-white\r\n    }\r\n\r\n    &.active__link::after {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n\r\n@mixin heroImgPostion {\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0 1.6rem;\r\n    color: $color-white;\r\n    margin-top: -120px;\r\n    width: 100vw;\r\n    height: 100vh;\r\n}\r\n.crew__bg {\r\n    @include heroStyle;\r\n\r\n    .container__img {\r\n        @include heroImage;\r\n        width: 100vw;\r\n        height: 720px;\r\n        min-height: 100vh;\r\n        background-image: url('../../asset/background-crew-desktop.jpg');\r\n\r\n    }\r\n}\r\n\r\n.crew {\r\n    @include heroImgPostion;\r\n    h2 {\r\n        font-size: $font-size-v10;\r\n        text-transform: $text-transfrom-upper;\r\n        font-family: $font-base-family-2;\r\n        letter-spacing: $letter-spacing-1;\r\n        font-weight: $font-weight-400;\r\n        line-height: 20px;\r\n        margin-top: 1rem;\r\n        text-align: center;\r\n        margin-bottom: 3rem;\r\n        position: relative;\r\n\r\n        @include media('>=tablet') {\r\n            position: absolute;\r\n            font-size: $font-size-v8;\r\n            top: -5%;\r\n            margin-top: 3rem;\r\n        }\r\n\r\n        @include media('>=smallDesktop') {\r\n            right: 76%;\r\n            top: 8%;\r\n            position: absolute;\r\n            font-size: $font-size-v7;\r\n        }\r\n\r\n        span {\r\n            font-weight: $font-weight-700;\r\n            opacity: $color-opacity;\r\n        }\r\n    }\r\n\r\n    @include media('>=tablet') {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column-reverse;\r\n    }\r\n\r\n    .crew__top {\r\n        .crew__img {\r\n            width: 177px;\r\n            height: 177px;\r\n            position: relative;\r\n            background-position: center;\r\n            background-repeat: no-repeat;\r\n            background-size: cover;\r\n            overflow: hidden;\r\n\r\n            @include media('>=tablet') {\r\n                width: 456px;\r\n                height: 572px;\r\n                top: 18px;\r\n                overflow: hidden;\r\n            }\r\n\r\n            @include media('>=smallDesktop') {\r\n                right: -70%;\r\n                top: 3.3rem;\r\n            }\r\n\r\n            @include media('>=midDesktop') {\r\n                width: 568.07px;\r\n                height: 712px;\r\n                top: 4rem;\r\n            }\r\n\r\n            .line {\r\n                position: absolute;\r\n                width: 350px;\r\n                top: 240px;\r\n                left: -83px;\r\n                border-bottom: 1px solid $color-white;\r\n                opacity: $color-opacity;\r\n\r\n                @include media('>=tablet') {\r\n                    border: none;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .crew__bottom {\r\n        @include media('>=tablet') {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            flex-direction: column-reverse;\r\n        }\r\n\r\n        @include media('>=smallDesktop') {\r\n            position: absolute;\r\n            left: 8%;\r\n        }\r\n\r\n        .page__links {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            position: relative;\r\n\r\n            @include media('>=smallDesktop') {\r\n                position: absolute;\r\n                bottom: -25%;\r\n                left: -2%;\r\n            }\r\n\r\n            li {\r\n                list-style: none;\r\n                .dot {\r\n                    width: 15px;\r\n                    height: 15px;\r\n                    background: $color-white;\r\n                    border-radius: 50%;\r\n                    opacity: $color-opacity;\r\n                    display: inline-block;\r\n                    margin: 0rem 1rem;\r\n                    margin-top: 3rem;\r\n                    list-style: none;\r\n\r\n                   \r\n                }\r\n            }\r\n        }\r\n\r\n        .text__info {\r\n            h1 {\r\n                font-family: $font-base-family-3;\r\n                font-size: $font-size-v8;\r\n                display: flex;\r\n                flex-direction: column;\r\n                text-align: center;\r\n                margin-top: 2rem;\r\n                text-transform: $text-transfrom-upper;\r\n                font-weight: $font-weight-400;\r\n\r\n                @include media('>=tablet') {\r\n                    margin-top: 4rem;\r\n                }\r\n\r\n                @include media('>=smallDesktop') {\r\n                    text-align: left;\r\n                    font-size: $font-size-v4;\r\n                }\r\n\r\n                span {\r\n                    font-size: $font-size-v11;\r\n                    opacity: $color-opacity;\r\n                    font-family: $font-base-family-3;\r\n\r\n                    @include media('>=smallDesktop') {\r\n                        font-size: $font-size-v6;\r\n                    }\r\n                }\r\n            }\r\n\r\n            p {\r\n                margin-top: 2rem;\r\n                font-size: $font-size-v12;\r\n                text-align: center;\r\n\r\n                @include media('>=tablet') {\r\n                    width: 460px;\r\n                }\r\n\r\n                @include media('>=smallDesktop') {\r\n                    text-align: left;\r\n                    font-size: $font-size-v10;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n.img_comandante{\r\n    margin-top: 100px;\r\n    height: 480px;\r\n}","@charset \"UTF-8\";\r\n\r\n$breakpoints: ('phone': 375px,\r\n    'largePhone': 575px,\r\n    'tablet': 768px,\r\n    'tabletBig': 920px,\r\n    'smallDesktop': 1150px,\r\n    'midDesktop': 1440px,\r\n    'largeDesktop': 1920px,\r\n\r\n) !default;\r\n\r\n\r\n\r\n$media-expressions: ('screen': 'screen',\r\n    'print': 'print',\r\n    'handheld': 'handheld',\r\n    'landscape': '(orientation: landscape)',\r\n    'portrait': '(orientation: portrait)',\r\n    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n    'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n\r\n$unit-intervals: ('px': 1,\r\n    'em': 0.01,\r\n    'rem': 0.1,\r\n    '': 0) !default;\r\n\r\n\r\n$im-media-support: true !default;\r\n\r\n\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n\r\n@function im-log($message) {\r\n    @if feature-exists('at-error') {\r\n        @error $message;\r\n    }\r\n\r\n    @else {\r\n        @warn $message;\r\n        $_: noop();\r\n    }\r\n\r\n    @return $message;\r\n}\r\n\r\n\r\n\r\n@mixin log($message) {\r\n    @if im-log($message) {}\r\n}\r\n\r\n\r\n\r\n@function noop() {}\r\n\r\n\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n    $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n    @if not $no-media-breakpoint-value {\r\n        @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n    }\r\n\r\n    @each $condition in $conditions {\r\n        @if not map-has-key($media-expressions, $condition) {\r\n            $operator: get-expression-operator($condition);\r\n            $prefix: get-expression-prefix($operator);\r\n            $value: get-expression-value($condition, $operator);\r\n\r\n            @if ($prefix=='max'and $value <=$no-media-breakpoint-value) or ($prefix=='min'and $value > $no-media-breakpoint-value) {\r\n                @return false;\r\n            }\r\n        }\r\n\r\n        @else if not index($im-no-media-expressions, $condition) {\r\n            @return false;\r\n        }\r\n    }\r\n\r\n    @return true;\r\n}\r\n\r\n\r\n@function get-expression-operator($expression) {\r\n    @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n        @if str-index($expression, $operator) {\r\n            @return $operator;\r\n        }\r\n    }\r\n\r\n\r\n    $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n\r\n@function get-expression-dimension($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n    $dimension: 'width';\r\n\r\n    @if str-length($parsed-dimension)>0 {\r\n        $dimension: $parsed-dimension;\r\n    }\r\n\r\n    @return $dimension;\r\n}\r\n\r\n@function get-expression-prefix($operator) {\r\n    @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n\r\n@function get-expression-value($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n    @if map-has-key($breakpoints, $value) {\r\n        $value: map-get($breakpoints, $value);\r\n    }\r\n\r\n    @else {\r\n        $value: to-number($value);\r\n    }\r\n\r\n    $interval: map-get($unit-intervals, unit($value));\r\n\r\n    @if not $interval {\r\n        $_: im-log('Unknown unit `#{unit($value)}`.');\r\n    }\r\n\r\n    @if $operator=='>' {\r\n        $value: $value + $interval;\r\n    }\r\n\r\n    @else if $operator=='<' {\r\n        $value: $value - $interval;\r\n    }\r\n\r\n    @return $value;\r\n}\r\n\r\n\r\n\r\n@function parse-expression($expression) {\r\n\r\n    @if map-has-key($media-expressions, $expression) {\r\n        @return map-get($media-expressions, $expression);\r\n    }\r\n\r\n    $operator: get-expression-operator($expression);\r\n    $dimension: get-expression-dimension($expression, $operator);\r\n    $prefix: get-expression-prefix($operator);\r\n    $value: get-expression-value($expression, $operator);\r\n\r\n    @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n    @if length($list) < 1 or $start>$end {\r\n        @return ();\r\n    }\r\n\r\n    $result: ();\r\n\r\n    @for $i from $start through $end {\r\n        $result: append($result, nth($list, $i));\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n\r\n@function to-number($value) {\r\n    @if type-of($value)=='number' {\r\n        @return $value;\r\n    }\r\n\r\n    @else if type-of($value) !='string' {\r\n        $_: im-log('Value for `to-number` should be a number or a string.');\r\n    }\r\n\r\n    $first-character: str-slice($value, 1, 1);\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: ($first-character=='-');\r\n    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n\r\n    @if ($first-character=='+'or $first-character=='-') {\r\n        $value: str-slice($value, 2);\r\n    }\r\n\r\n    @for $i from 1 through str-length($value) {\r\n        $character: str-slice($value, $i, $i);\r\n\r\n        @if not (index(map-keys($numbers), $character) or $character=='.') {\r\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n        }\r\n\r\n        @if $character=='.' {\r\n            $digits: 1;\r\n        }\r\n\r\n        @else if $digits==0 {\r\n            $result: $result * 10 + map-get($numbers, $character);\r\n        }\r\n\r\n        @else {\r\n            $digits: $digits * 10;\r\n            $result: $result + map-get($numbers, $character) / $digits;\r\n        }\r\n    }\r\n\r\n    @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n\r\n@function to-length($value, $unit) {\r\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: im-log('Invalid unit `#{$unit}`.');\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n\r\n\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n    // Save global configuration\r\n    $global-breakpoints: $breakpoints;\r\n    $global-media-expressions: $media-expressions;\r\n\r\n    // Update global configuration\r\n    $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n    $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n    @content;\r\n\r\n    // Restore global configuration\r\n    $breakpoints: $global-breakpoints !global;\r\n    $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n\r\n@mixin media($conditions...) {\r\n    @if ($im-media-support and length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n        @content;\r\n    }\r\n\r\n    @else if ($im-media-support and length($conditions) > 0) {\r\n        @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\r\n            // Recursive call\r\n            @include media(slice($conditions, 2)...) {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}","* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@400;700&family=Barlow:wght@400;700&family=Bellefair&display=swap');\r\n@import 'breakpoints';\r\n$font-base-family-1: 'Barlow';\r\n$font-base-family-2: 'Barlow Condensed';\r\n$font-base-family-3: 'Bellefair';\r\n\r\n\r\n$font-size-v1: 9.375rem; //150px\r\n$font-size-v2: 6.25rem; //100px\r\n$font-size-v3: 5rem; //80px\r\n$font-size-v4: 3.5rem; //56px\r\n$font-size-v5: 2.5rem; //40px\r\n$font-size-v6: 2rem; //32px\r\n$font-size-v7: 1.75rem; //28px\r\n$font-size-v8: 1.5rem; //24px\r\n$font-size-v9: 1.25rem; //20px\r\n$font-size-v10: 1.125rem; //18px\r\n$font-size-v11: 1rem; //16px\r\n$font-size-v12: .938rem; //15px\r\n$font-size-v13: .875rem; //14px\r\n\r\n$font-weight-400: 400;\r\n$font-weight-700: 700;\r\n\r\n\r\n$text-transfrom-upper: uppercase;\r\n$text-transfrom-capitalize: capitalize;\r\n\r\n$letter-spacing-1: 2.7px;\r\n\r\n$color-very-dark: hsl(230, 33%, 7%);\r\n$color-light-grayish-blue: hsl(231, 77%, 90%);\r\n$color-white: hsl(0, 0%, 100%);\r\n$color-opacity: .25;\r\n\r\n@mixin heroStyle {\r\n    position: absolute;\r\n    color: $color-white;\r\n    text-align: center;\r\n    top: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin heroImage {\r\n    position: relative;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n@mixin navbarHover {\r\n\r\n    &::after {\r\n        content: '';\r\n        position: absolute;\r\n        bottom: -100%;\r\n        width: 0%;\r\n        left: 0%;\r\n        border-bottom: 3px solid $color-white;\r\n        background: none;\r\n        transition: .8s cubic-bezier(0.5, 1, 0.89, 1);\r\n        display: block;\r\n    }\r\n\r\n    &:hover::after,\r\n    &:focus::after {\r\n        opacity: .5;\r\n        width: 100%;\r\n        border-bottom: 3px solid $color-white\r\n    }\r\n\r\n    &.active__link::after {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n\r\n@mixin heroImgPostion {\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0 1.6rem;\r\n    color: $color-white;\r\n    margin-top: -120px;\r\n    width: 100vw;\r\n    height: 100vh;\r\n}\r\n\r\n\r\n.tech__bg {\r\n    @include heroStyle;\r\n\r\n    .container__img {\r\n        @include heroImage;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        min-height: 667px;\r\n        background-image: url('../../asset/background-technology-desktop.jpg');\r\n\r\n    }\r\n}\r\n\r\n.cohete{\r\n    margin-top: 100px;\r\n    height: 480px;\r\n    border-radius: 5px;\r\n}\r\n.titulo{\r\n    margin-left: 30px;\r\n    margin-top: 100px\r\n}\r\n.tech {\r\n\r\n    @include heroImgPostion;\r\n    padding: 0;\r\n\r\n    @include media('>=smallDesktop') {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .tech__top {\r\n        margin-top: 50px;\r\n        margin: 2.5rem 0;\r\n\r\n        @include media('>=tablet') {\r\n            margin-top: 20%;\r\n        }\r\n\r\n        @include media('>=smallDesktop') {\r\n            margin-top: 5%;\r\n        }\r\n\r\n        @include media('>=midDesktop') {\r\n            margin-top: 10%;\r\n        }\r\n    }\r\n\r\n    .tech__bottom {\r\n        padding: 0 1.5rem;\r\n        text-align: center;\r\n\r\n        @include media('>=smallDesktop') {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        h2 {\r\n            font-family: $font-base-family-2;\r\n            font-size: $font-size-v11;\r\n            text-transform: $text-transfrom-upper;\r\n            letter-spacing: 2.7px;\r\n            font-weight: $font-weight-400;\r\n            position: absolute;\r\n            top: -1%;\r\n            left: 30%;\r\n\r\n            span {\r\n                font-weight: $font-weight-700;\r\n                opacity: $color-opacity;\r\n            }\r\n\r\n            @include media('>=tablet') {\r\n                font-size: $font-size-v9;\r\n                left: 4%;\r\n                top: 3.5%;\r\n            }\r\n\r\n            @include media('>=smallDesktop') {\r\n                font-size: $font-size-v7;\r\n            }\r\n        }\r\n\r\n        .page__links {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            @include media('>=smallDesktop') {\r\n                display: block;\r\n            }\r\n\r\n            li {\r\n                list-style: none;\r\n                .dot {\r\n                    font-family: $font-base-family-3;\r\n                    font-size: $font-size-v11;\r\n                    color: $color-white;\r\n                    width: 40px;\r\n                    height: 40px;\r\n                    border: 1px solid hsla(0, 0%, 100%, 0.363);\r\n                    margin: 1rem;\r\n                    border-radius: 50%;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    transition: 0.6s cubic-bezier(0.61, 1, 0.88, 1);\r\n\r\n                    &:hover,\r\n                    &:focus,\r\n                    &.active__link {\r\n                        border: 1px solid $color-white;\r\n                    }\r\n\r\n                    @include media('>=smallDesktop') {\r\n                        width: 80px;\r\n                        height: 80px;\r\n                        font-size: $font-size-v6;\r\n                        margin: 2.5rem;\r\n                    }\r\n                }\r\n\r\n                .active {\r\n                    background-color: white;\r\n                    color: $color-very-dark;\r\n                    border: 1px solid $color-white;\r\n                }\r\n            }\r\n        }\r\n\r\n        .text__info {\r\n\r\n            @include media('>=smallDesktop') {\r\n                display: block;\r\n                text-align: left;\r\n            }\r\n\r\n            h1 {\r\n                font-family: $font-base-family-3;\r\n                font-size: $font-size-v8;\r\n                text-transform: $text-transfrom-upper;\r\n                font-weight: $font-weight-400;\r\n                display: flex;\r\n                flex-direction: column;\r\n                margin-top: 2rem;\r\n\r\n                span {\r\n                    font-family: $font-base-family-2;\r\n                    font-size: $font-size-v13;\r\n                    letter-spacing: 2.4px;\r\n\r\n                    @include media('>=tablet') {\r\n                        font-size: $font-size-v12;\r\n                    }\r\n                }\r\n\r\n                @include media('>=tablet') {\r\n                    font-size: $font-size-v5;\r\n                }\r\n\r\n                @include media('>=smallDesktop') {\r\n                    font-size: $font-size-v4;\r\n                    margin-top: .5rem;\r\n                }\r\n            }\r\n\r\n            p {\r\n                font-size: $font-size-v12;\r\n                line-height: 25px;\r\n                margin-top: 1rem;\r\n\r\n                @include media('>=tablet') {\r\n                    font-size: $font-size-v11;\r\n                    width: 460px;\r\n                }\r\n\r\n                @include media('>=smallDesktop') {\r\n                    font-size: $font-size-v10;\r\n                    width: 445px;\r\n                    line-height: 32px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","@charset \"UTF-8\";\r\n\r\n$breakpoints: ('phone': 375px,\r\n    'largePhone': 575px,\r\n    'tablet': 768px,\r\n    'tabletBig': 920px,\r\n    'smallDesktop': 1150px,\r\n    'midDesktop': 1440px,\r\n    'largeDesktop': 1920px,\r\n\r\n) !default;\r\n\r\n\r\n\r\n$media-expressions: ('screen': 'screen',\r\n    'print': 'print',\r\n    'handheld': 'handheld',\r\n    'landscape': '(orientation: landscape)',\r\n    'portrait': '(orientation: portrait)',\r\n    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n    'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n\r\n$unit-intervals: ('px': 1,\r\n    'em': 0.01,\r\n    'rem': 0.1,\r\n    '': 0) !default;\r\n\r\n\r\n$im-media-support: true !default;\r\n\r\n\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n\r\n@function im-log($message) {\r\n    @if feature-exists('at-error') {\r\n        @error $message;\r\n    }\r\n\r\n    @else {\r\n        @warn $message;\r\n        $_: noop();\r\n    }\r\n\r\n    @return $message;\r\n}\r\n\r\n\r\n\r\n@mixin log($message) {\r\n    @if im-log($message) {}\r\n}\r\n\r\n\r\n\r\n@function noop() {}\r\n\r\n\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n    $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n    @if not $no-media-breakpoint-value {\r\n        @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n    }\r\n\r\n    @each $condition in $conditions {\r\n        @if not map-has-key($media-expressions, $condition) {\r\n            $operator: get-expression-operator($condition);\r\n            $prefix: get-expression-prefix($operator);\r\n            $value: get-expression-value($condition, $operator);\r\n\r\n            @if ($prefix=='max'and $value <=$no-media-breakpoint-value) or ($prefix=='min'and $value > $no-media-breakpoint-value) {\r\n                @return false;\r\n            }\r\n        }\r\n\r\n        @else if not index($im-no-media-expressions, $condition) {\r\n            @return false;\r\n        }\r\n    }\r\n\r\n    @return true;\r\n}\r\n\r\n\r\n@function get-expression-operator($expression) {\r\n    @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n        @if str-index($expression, $operator) {\r\n            @return $operator;\r\n        }\r\n    }\r\n\r\n\r\n    $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n\r\n@function get-expression-dimension($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n    $dimension: 'width';\r\n\r\n    @if str-length($parsed-dimension)>0 {\r\n        $dimension: $parsed-dimension;\r\n    }\r\n\r\n    @return $dimension;\r\n}\r\n\r\n@function get-expression-prefix($operator) {\r\n    @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n\r\n@function get-expression-value($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n    @if map-has-key($breakpoints, $value) {\r\n        $value: map-get($breakpoints, $value);\r\n    }\r\n\r\n    @else {\r\n        $value: to-number($value);\r\n    }\r\n\r\n    $interval: map-get($unit-intervals, unit($value));\r\n\r\n    @if not $interval {\r\n        $_: im-log('Unknown unit `#{unit($value)}`.');\r\n    }\r\n\r\n    @if $operator=='>' {\r\n        $value: $value + $interval;\r\n    }\r\n\r\n    @else if $operator=='<' {\r\n        $value: $value - $interval;\r\n    }\r\n\r\n    @return $value;\r\n}\r\n\r\n\r\n\r\n@function parse-expression($expression) {\r\n\r\n    @if map-has-key($media-expressions, $expression) {\r\n        @return map-get($media-expressions, $expression);\r\n    }\r\n\r\n    $operator: get-expression-operator($expression);\r\n    $dimension: get-expression-dimension($expression, $operator);\r\n    $prefix: get-expression-prefix($operator);\r\n    $value: get-expression-value($expression, $operator);\r\n\r\n    @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n    @if length($list) < 1 or $start>$end {\r\n        @return ();\r\n    }\r\n\r\n    $result: ();\r\n\r\n    @for $i from $start through $end {\r\n        $result: append($result, nth($list, $i));\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n\r\n@function to-number($value) {\r\n    @if type-of($value)=='number' {\r\n        @return $value;\r\n    }\r\n\r\n    @else if type-of($value) !='string' {\r\n        $_: im-log('Value for `to-number` should be a number or a string.');\r\n    }\r\n\r\n    $first-character: str-slice($value, 1, 1);\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: ($first-character=='-');\r\n    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n\r\n    @if ($first-character=='+'or $first-character=='-') {\r\n        $value: str-slice($value, 2);\r\n    }\r\n\r\n    @for $i from 1 through str-length($value) {\r\n        $character: str-slice($value, $i, $i);\r\n\r\n        @if not (index(map-keys($numbers), $character) or $character=='.') {\r\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n        }\r\n\r\n        @if $character=='.' {\r\n            $digits: 1;\r\n        }\r\n\r\n        @else if $digits==0 {\r\n            $result: $result * 10 + map-get($numbers, $character);\r\n        }\r\n\r\n        @else {\r\n            $digits: $digits * 10;\r\n            $result: $result + map-get($numbers, $character) / $digits;\r\n        }\r\n    }\r\n\r\n    @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n\r\n@function to-length($value, $unit) {\r\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: im-log('Invalid unit `#{$unit}`.');\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n\r\n\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n    // Save global configuration\r\n    $global-breakpoints: $breakpoints;\r\n    $global-media-expressions: $media-expressions;\r\n\r\n    // Update global configuration\r\n    $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n    $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n    @content;\r\n\r\n    // Restore global configuration\r\n    $breakpoints: $global-breakpoints !global;\r\n    $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n\r\n@mixin media($conditions...) {\r\n    @if ($im-media-support and length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n        @content;\r\n    }\r\n\r\n    @else if ($im-media-support and length($conditions) > 0) {\r\n        @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\r\n            // Recursive call\r\n            @include media(slice($conditions, 2)...) {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}","* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@400;700&family=Barlow:wght@400;700&family=Bellefair&display=swap');\r\n@import 'breakpoints';\r\n$font-base-family-1: 'Barlow';\r\n$font-base-family-2: 'Barlow Condensed';\r\n$font-base-family-3: 'Bellefair';\r\n\r\n\r\n$font-size-v1: 9.375rem; //150px\r\n$font-size-v2: 6.25rem; //100px\r\n$font-size-v3: 5rem; //80px\r\n$font-size-v4: 3.5rem; //56px\r\n$font-size-v5: 2.5rem; //40px\r\n$font-size-v6: 2rem; //32px\r\n$font-size-v7: 1.75rem; //28px\r\n$font-size-v8: 1.5rem; //24px\r\n$font-size-v9: 1.25rem; //20px\r\n$font-size-v10: 1.125rem; //18px\r\n$font-size-v11: 1rem; //16px\r\n$font-size-v12: .938rem; //15px\r\n$font-size-v13: .875rem; //14px\r\n\r\n$font-weight-400: 400;\r\n$font-weight-700: 700;\r\n\r\n\r\n$text-transfrom-upper: uppercase;\r\n$text-transfrom-capitalize: capitalize;\r\n\r\n$letter-spacing-1: 2.7px;\r\n\r\n$color-very-dark: hsl(230, 33%, 7%);\r\n$color-light-grayish-blue: hsl(231, 77%, 90%);\r\n$color-white: hsl(0, 0%, 100%);\r\n$color-opacity: .25;\r\n\r\n@mixin heroStyle {\r\n    position: absolute;\r\n    color: $color-white;\r\n    text-align: center;\r\n    top: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin heroImage {\r\n    position: relative;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n@mixin navbarHover {\r\n\r\n    &::after {\r\n        content: '';\r\n        position: absolute;\r\n        bottom: -100%;\r\n        width: 0%;\r\n        left: 0%;\r\n        border-bottom: 3px solid $color-white;\r\n        background: none;\r\n        transition: .8s cubic-bezier(0.5, 1, 0.89, 1);\r\n        display: block;\r\n    }\r\n\r\n    &:hover::after,\r\n    &:focus::after {\r\n        opacity: .5;\r\n        width: 100%;\r\n        border-bottom: 3px solid $color-white\r\n    }\r\n\r\n    &.active__link::after {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n\r\n@mixin heroImgPostion {\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0 1.6rem;\r\n    color: $color-white;\r\n    margin-top: 1rem;\r\n    width: 100vw;\r\n}\r\n\r\n#header .header {\r\n    height: auto;\r\n    background-color: transparent;\r\n\r\n    .nav-bar {\r\n        margin-top: .6rem;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        width: 100%;\r\n        height: 100%;\r\n\r\n        @include media('>largePhone') {\r\n            margin-top: 0;\r\n        }\r\n\r\n        @include media('>smallDesktop') {\r\n            margin-top: 2rem;\r\n        }\r\n\r\n        .brand {\r\n            z-index: 9;\r\n            height: 48px;\r\n            width: 48px;\r\n            margin-left: 1.2rem;\r\n        }\r\n\r\n        @include media('>smallDesktop') {\r\n            .nav-line {\r\n                position: absolute;\r\n                width: 37%;\r\n                border: 1px solid $color-white;\r\n                opacity: .25;\r\n                margin-left: 17rem;\r\n                top: 69px;\r\n                z-index: 1;\r\n            }\r\n        }\r\n\r\n        @include media('>largePhone') {\r\n            height: 75px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n        }\r\n\r\n        .nav-list {\r\n            @include media('>largePhone') {\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n\r\n            #nav__list {\r\n                position: absolute;\r\n                content: '';\r\n                display: flex;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n                align-items: flex-start;\r\n                background: rgba(56, 54, 54, 0.698);\r\n                -webkit-backdrop-filter: blur(15px);\r\n                backdrop-filter: blur(15px);\r\n                width: 75vw;\r\n                height: 80vh;\r\n                right: 0%;\r\n                left: -100%;\r\n                top: 0;\r\n                overflow-x: hidden;\r\n                transition: .6s cubic-bezier(0, 0.55, 0.45, 1);\r\n                z-index: 3;\r\n\r\n                @include media('>largePhone') {\r\n                    position: initial;\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: center;\r\n                    height: auto;\r\n                    width: auto;\r\n                    background-color: transparent;\r\n                    padding-right: 0rem;\r\n                }\r\n                &.active {\r\n                    left: 25%;\r\n                }\r\n\r\n                li {\r\n\r\n                    @include media('>largePhone') {\r\n                        padding: 1rem .8rem;\r\n                    }\r\n\r\n                    @include media('>=tablet') {\r\n                        padding: 1rem 2rem;\r\n                    }\r\n\r\n                    @include media('>largePhone') {\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        background: rgba(170, 160, 160, 0.109);\r\n                        height: 76px;\r\n                    }\r\n\r\n                    .navbar__link {\r\n                        position: relative;\r\n                        color: $color-white;\r\n                        text-transform: uppercase;\r\n                        margin-bottom: 2rem;\r\n                        display: block;\r\n                        font-family: $font-base-family-2;\r\n                        font-weight: $font-weight-400;\r\n                        font-size: $font-size-v11;\r\n                        letter-spacing: $letter-spacing-1;\r\n                        padding-left: .938rem;\r\n\r\n                        @include media('>largePhone') {\r\n                            padding-left: 0;\r\n                        }\r\n\r\n                        @include media('>=tablet') {\r\n                            margin: 0 auto\r\n                        }\r\n\r\n                        @include navbarHover;\r\n\r\n                        span {\r\n                            font-weight: $font-weight-700;\r\n\r\n                            @include media('>largePhone') {\r\n                                margin-right: .2rem;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            .hamburger {\r\n                position: relative;\r\n                height: 60px;\r\n                width: 60px;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                z-index: 10;\r\n                cursor: pointer;\r\n\r\n                @include media('>largePhone') {\r\n                    display: none;\r\n                }\r\n\r\n                &:after {\r\n                    position: absolute;\r\n                    content: '';\r\n                    height: 100%;\r\n                    width: 100%;\r\n                }\r\n\r\n                .bar {\r\n                    height: 3px;\r\n                    width: 30px;\r\n                    position: relative;\r\n                    background-color: $color-white;\r\n                    z-index: -1;\r\n\r\n                    &::after,\r\n                    &::before {\r\n                        content: '';\r\n                        position: absolute;\r\n                        height: 100%;\r\n                        width: 100%;\r\n                        left: 0;\r\n                        background-color: $color-white;\r\n                        transition: .3s ease;\r\n                    }\r\n\r\n                    &::after {\r\n                        top: 8px;\r\n                    }\r\n\r\n                    &::before {\r\n                        bottom: 8px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .hamburger.active ::before {\r\n                bottom: 0;\r\n            }\r\n\r\n            .hamburger.active ::after {\r\n                top: 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n$breakpoints: ('phone': 375px,\r\n    'largePhone': 575px,\r\n    'tablet': 768px,\r\n    'tabletBig': 920px,\r\n    'smallDesktop': 1150px,\r\n    'midDesktop': 1440px,\r\n    'largeDesktop': 1920px,\r\n\r\n) !default;\r\n\r\n\r\n\r\n$media-expressions: ('screen': 'screen',\r\n    'print': 'print',\r\n    'handheld': 'handheld',\r\n    'landscape': '(orientation: landscape)',\r\n    'portrait': '(orientation: portrait)',\r\n    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n    'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n\r\n$unit-intervals: ('px': 1,\r\n    'em': 0.01,\r\n    'rem': 0.1,\r\n    '': 0) !default;\r\n\r\n\r\n$im-media-support: true !default;\r\n\r\n\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n\r\n@function im-log($message) {\r\n    @if feature-exists('at-error') {\r\n        @error $message;\r\n    }\r\n\r\n    @else {\r\n        @warn $message;\r\n        $_: noop();\r\n    }\r\n\r\n    @return $message;\r\n}\r\n\r\n\r\n\r\n@mixin log($message) {\r\n    @if im-log($message) {}\r\n}\r\n\r\n\r\n\r\n@function noop() {}\r\n\r\n\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n    $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n    @if not $no-media-breakpoint-value {\r\n        @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n    }\r\n\r\n    @each $condition in $conditions {\r\n        @if not map-has-key($media-expressions, $condition) {\r\n            $operator: get-expression-operator($condition);\r\n            $prefix: get-expression-prefix($operator);\r\n            $value: get-expression-value($condition, $operator);\r\n\r\n            @if ($prefix=='max'and $value <=$no-media-breakpoint-value) or ($prefix=='min'and $value > $no-media-breakpoint-value) {\r\n                @return false;\r\n            }\r\n        }\r\n\r\n        @else if not index($im-no-media-expressions, $condition) {\r\n            @return false;\r\n        }\r\n    }\r\n\r\n    @return true;\r\n}\r\n\r\n\r\n@function get-expression-operator($expression) {\r\n    @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n        @if str-index($expression, $operator) {\r\n            @return $operator;\r\n        }\r\n    }\r\n\r\n\r\n    $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n\r\n@function get-expression-dimension($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n    $dimension: 'width';\r\n\r\n    @if str-length($parsed-dimension)>0 {\r\n        $dimension: $parsed-dimension;\r\n    }\r\n\r\n    @return $dimension;\r\n}\r\n\r\n@function get-expression-prefix($operator) {\r\n    @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n\r\n@function get-expression-value($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n    @if map-has-key($breakpoints, $value) {\r\n        $value: map-get($breakpoints, $value);\r\n    }\r\n\r\n    @else {\r\n        $value: to-number($value);\r\n    }\r\n\r\n    $interval: map-get($unit-intervals, unit($value));\r\n\r\n    @if not $interval {\r\n        $_: im-log('Unknown unit `#{unit($value)}`.');\r\n    }\r\n\r\n    @if $operator=='>' {\r\n        $value: $value + $interval;\r\n    }\r\n\r\n    @else if $operator=='<' {\r\n        $value: $value - $interval;\r\n    }\r\n\r\n    @return $value;\r\n}\r\n\r\n\r\n\r\n@function parse-expression($expression) {\r\n\r\n    @if map-has-key($media-expressions, $expression) {\r\n        @return map-get($media-expressions, $expression);\r\n    }\r\n\r\n    $operator: get-expression-operator($expression);\r\n    $dimension: get-expression-dimension($expression, $operator);\r\n    $prefix: get-expression-prefix($operator);\r\n    $value: get-expression-value($expression, $operator);\r\n\r\n    @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n    @if length($list) < 1 or $start>$end {\r\n        @return ();\r\n    }\r\n\r\n    $result: ();\r\n\r\n    @for $i from $start through $end {\r\n        $result: append($result, nth($list, $i));\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n\r\n@function to-number($value) {\r\n    @if type-of($value)=='number' {\r\n        @return $value;\r\n    }\r\n\r\n    @else if type-of($value) !='string' {\r\n        $_: im-log('Value for `to-number` should be a number or a string.');\r\n    }\r\n\r\n    $first-character: str-slice($value, 1, 1);\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: ($first-character=='-');\r\n    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n\r\n    @if ($first-character=='+'or $first-character=='-') {\r\n        $value: str-slice($value, 2);\r\n    }\r\n\r\n    @for $i from 1 through str-length($value) {\r\n        $character: str-slice($value, $i, $i);\r\n\r\n        @if not (index(map-keys($numbers), $character) or $character=='.') {\r\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n        }\r\n\r\n        @if $character=='.' {\r\n            $digits: 1;\r\n        }\r\n\r\n        @else if $digits==0 {\r\n            $result: $result * 10 + map-get($numbers, $character);\r\n        }\r\n\r\n        @else {\r\n            $digits: $digits * 10;\r\n            $result: $result + map-get($numbers, $character) / $digits;\r\n        }\r\n    }\r\n\r\n    @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n\r\n@function to-length($value, $unit) {\r\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: im-log('Invalid unit `#{$unit}`.');\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n\r\n\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n    // Save global configuration\r\n    $global-breakpoints: $breakpoints;\r\n    $global-media-expressions: $media-expressions;\r\n\r\n    // Update global configuration\r\n    $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n    $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n    @content;\r\n\r\n    // Restore global configuration\r\n    $breakpoints: $global-breakpoints !global;\r\n    $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n\r\n@mixin media($conditions...) {\r\n    @if ($im-media-support and length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n        @content;\r\n    }\r\n\r\n    @else if ($im-media-support and length($conditions) > 0) {\r\n        @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\r\n            // Recursive call\r\n            @include media(slice($conditions, 2)...) {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}